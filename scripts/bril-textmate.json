{
  "name": "bril",
  "scopeName": "source.bril",
  "fileTypes": [
    "bril"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#function"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "match": "#.*$",
          "name": "comment.line"
        }
      ]
    },
    "func_name": {
      "patterns": [
        {
          "match": "@\\w+",
          "name": "entity.name.function"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "begin": "\\s*(@\\w+)(?:\\(([^\\)]*)\\))?\\s*(?::(\\w+))?\\{",
          "beginCaptures": {
            "1": {
              "patterns": [
                {
                  "include": "#func_name"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#arg_list"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#types"
                }
              ]
            }
          },
          "end": "\\}",
          "name": "meta.function.bril",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#label_def"
            },
            {
              "include": "#effect_instruction"
            },
            {
              "include": "#assignment"
            }
          ]
        }
      ]
    },
    "arg_list": {
      "patterns": [
        {
          "match": "((?:\\s*[^,]+\\s*,\\s*)*)\\s*(\\w+)\\s*(?::\\s*(\\w+))?\\s*,?",
          "captures": {
            "3": {
              "patterns": [
                {
                  "include": "#types"
                }
              ]
            },
            "2": {
              "name": "variable.parameter meta.variable.dest.bril"
            },
            "1": {
              "patterns": [
                {
                  "include": "#arg_list"
                }
              ]
            }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "(true|false)",
          "name": "constant.boolean"
        },
        {
          "match": "-?[0-9]+(?:\\.[0-9]+)?",
          "name": "constant.numeric"
        }
      ]
    },
    "label": {
      "patterns": [
        {
          "match": "(\\.[\\w|\\.]+)",
          "name": "meta.label.bril",
          "captures": {
            "1": {
              "name": "entity.name.class"
            }
          }
        }
      ]
    },
    "label_def": {
      "patterns": [
        {
          "begin": "^(\\.[\\w|\\.]+):\\s*",
          "end": "$",
          "name": "meta.label.def.bril",
          "beginCaptures": {
            "1": {
              "name": "entity.name.class"
            }
          }
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "\\b\\w+\\b",
          "name": "meta.variable.bril"
        }
      ]
    },
    "dest_variable": {
      "patterns": [
        {
          "match": "\\b\\w+\\b",
          "name": "meta.variable.dest.bril"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "(int|bool|float|char)",
          "name": "storage.type"
        }
      ]
    },
    "assignment": {
      "patterns": [
        {
          "match": "\\s*(\\b\\w+\\b)\\s*(?::\\s*(\\w+))?\\s*=\\s*(.*);",
          "name": "meta.assignment.bril",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#dest_variable"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#types"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#value_instruction"
                }
              ]
            }
          }
        }
      ]
    },
    "arg_slots": {
      "patterns": [
        {
          "match": "([^;]*)(;)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#arg_slots"
                }
              ]
            }
          }
        },
        {
          "match": "\\s*([^\\s]+)\\s*",
          "name": "meta.instruction.arg.bril",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#constants"
                },
                {
                  "include": "#func_name"
                },
                {
                  "include": "#label"
                },
                {
                  "include": "#variable"
                }
              ]
            }
          }
        },
        {
          "match": "((?:\\s*[^\\s]+\\s+)+)([^\\s]+)\\s*",
          "name": "meta.instruction.args.bril",
          "captures": {
            "2": {
              "patterns": [
                {
                  "include": "#constants"
                },
                {
                  "include": "#func_name"
                },
                {
                  "include": "#label"
                },
                {
                  "include": "#variable"
                }
              ]
            },
            "1": {
              "patterns": [
                {
                  "include": "#arg_slots"
                }
              ]
            }
          }
        }
      ]
    },
    "effect_instruction": {
      "patterns": [
        {
          "begin": "\\s*(call|jmp|br|ret|print|nop|speculate|guard|commit)\\s*",
          "end": "$",
          "name": "meta.instruction.effect.bril",
          "beginCaptures": {
            "1": {
              "name": "keyword"
            }
          },
          "patterns": [
            {
              "include": "#arg_slots"
            }
          ]
        }
      ]
    },
    "value_instruction": {
      "patterns": [
        {
          "begin": "\\s*(id|const|add|mul|sub|div|eq|lt|gt|le|ge|not|and|or)\\s*",
          "end": "$",
          "name": "meta.instruction.value.bril",
          "beginCaptures": {
            "1": {
              "name": "keyword"
            }
          },
          "patterns": [
            {
              "include": "#arg_slots"
            }
          ]
        }
      ]
    }
  }
}
